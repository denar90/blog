<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Marionette.js Blog]]></title>
  <subtitle><![CDATA[Detailed analysis showing usage of Marionette features within real-world applications]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://marionettejs.github.io/"/>
  <updated>2016-08-05T21:16:37.487Z</updated>
  <id>http://marionettejs.github.io/</id>
  
  <author>
    <name><![CDATA[Team Marionette]]></name>
    <email><![CDATA[himarionette@gmai.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Meeting notes 12.30.14]]></title>
    <link href="http://marionettejs.github.io/2016/08/05/meeting-notes-12-30-2014/"/>
    <id>http://marionettejs.github.io/2016/08/05/meeting-notes-12-30-2014/</id>
    <published>2016-08-05T21:16:13.630Z</published>
    <updated>2016-08-05T21:16:13.630Z</updated>
    <content type="html"><![CDATA[<p>Meeting notes 12.30.14</p>
<ul>
<li><p><strong>Sam</strong></p>
<ul>
<li>minor 2.3.1 release to fix html bug</li>
<li>new website is almost up to feature pairity</li>
</ul>
</li>
<li><p><strong>James Kyle</strong></p>
<ul>
<li>new view ideas<ul>
<li>investigation into a way to render children that are independent of their parent view render cycle, in an effort to optimize rendering and child view updates.</li>
<li>In step with this idea, questioning the idea of having a region and is it even needed?</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    
    
      <category term="notes" scheme="http://marionettejs.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[A deep dive into Backbone.View events]]></title>
    <link href="http://marionettejs.github.io/2015/02/12/understanding-the-event-hash/"/>
    <id>http://marionettejs.github.io/2015/02/12/understanding-the-event-hash/</id>
    <published>2015-02-12T21:19:00.000Z</published>
    <updated>2016-08-05T21:16:13.630Z</updated>
    <content type="html"><![CDATA[<p>Backbone Views have a handy declarative events API. That lets you abstract your DOM event bindings into a declarative hash on your views prototype. For example</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Backbone.View.extend({</div><div class="line">  template: _.template(<span class="string">"&lt;p&gt;click me &lt;/p&gt;"</span>),</div><div class="line">  events: {</div><div class="line">    <span class="string">"click p"</span>: () =&gt; {<span class="built_in">console</span>.log(<span class="string">"clicked"</span>)}</div><div class="line">  }</div><div class="line">})</div></pre></td></tr></table></figure>

<p>After your view is created and rendered, anytime a user clicks on the <code>p</code> tag there will be a nice alert message in the console.</p>
<p>How does this work though? Let’s dive in and investigate.</p>
<p>Before we go into the exact details, let’s step through the path of setting up event handlers on DOM nodes to round out our perspective.</p>
<p>In the early days of html (V3.2) or so <a href="http://www.w3.org/TR/WD-script-960208.html" target="_blank" rel="external">w3-spec</a><br>there was a call to allow users to harness a set of “intrinsic events that are generated by objects associated with HTML elements”, <code>onClick</code> happens to be one of those. With that said, why don’t we turn back the clock and set up an “intrinsic” event?</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">p</span> <span class="attribute">onclick</span>=<span class="value">"alert('wow such inline')"</span>&gt;</span>click me<span class="tag">&lt;/<span class="title">p</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Most people can agree nowadays that we want some degree of separation between our markup language and event bindings*, allowing a level of declarative control at a scripting level.</p>
<p>In comes the mythical JavaScript beast.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span> im just a p tag sitting in a body <span class="tag">&lt;/<span class="title">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="built_in">document</span>.querySelector(<span class="string">'p'</span>).addEventListener(<span class="string">'click'</span>, ()=&gt; alert(<span class="string">'hi mom'</span>), <span class="literal">false</span>)</div><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div></pre></td></tr></table></figure>

<p><code>addEventListener</code> gives you the ability to register arbitrary event listeners on the event target, opening the door for dynamic event registration and essentially giving you the power to set up a reactive DOM tree depending on a user’s actions.</p>
<p>From there we waddle up the evolutionary tree into jQuery, and into the beauty of <code>$.on</code>. At this point we can get back to the question initially proposed. How does the Backbone event hash really work?</p>
<p>Looking at the source for Backbone’s View class we see a call to <a href="https://github.com/jashkenas/backbone/blob/1.1.0/backbone.js#L992" target="_blank" rel="external"><code>delegateEvents</code></a> within our view constructor</p>
<p>Let’s step through this method line by line to really understand every single thing that it is doing.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">delegateEvents: <span class="function"><span class="keyword">function</span><span class="params">(events)</span> </span>{</div><div class="line">  <span class="comment">// If we have no events NOOP and exit the method.</span></div><div class="line">  <span class="comment">// (this is sometimes called a GuardClause or Precondition*)</span></div><div class="line">  <span class="keyword">if</span> (!(events || (events = _.result(<span class="keyword">this</span>, <span class="string">'events'</span>)))) <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  <span class="comment">// unset any event handlers that might</span></div><div class="line">  <span class="comment">// already be in place</span></div><div class="line">  <span class="keyword">this</span>.undelegateEvents();</div><div class="line">  <span class="comment">// Now we are going to loop over every key value pair</span></div><div class="line">  <span class="comment">// in the events hash. For this case lets assume the events hash</span></div><div class="line">  <span class="comment">// contains a single key value pair</span></div><div class="line">  <span class="comment">// of {"click p": function(){alert('hi')}}</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> events) {</div><div class="line">    <span class="comment">// Since we only have the key value of the</span></div><div class="line">    <span class="comment">// hash ("click p") in this case</span></div><div class="line">    <span class="comment">// we need to get the value out of the events hash.</span></div><div class="line">    <span class="keyword">var</span> method = events[key];</div><div class="line">    <span class="comment">// Backbone allows you to pass in a string based value</span></div><div class="line">    <span class="comment">// that it will look up</span></div><div class="line">    <span class="comment">// on the view instance. In our case we do not have to work</span></div><div class="line">    <span class="comment">// about this line</span></div><div class="line">    <span class="keyword">if</span> (!_.isFunction(method)) method = <span class="keyword">this</span>[events[key]];</div><div class="line">    <span class="comment">// If there is no value, or the value evaluated to a</span></div><div class="line">    <span class="comment">// falsey value kick out of this</span></div><div class="line">    <span class="comment">// iteration of the loop. (This is a micro optimization)</span></div><div class="line">    <span class="keyword">if</span> (!method) <span class="keyword">continue</span>;</div><div class="line">    <span class="comment">// The match here is going to take care of splitting the</span></div><div class="line">    <span class="comment">// DOM node selector from the</span></div><div class="line">    <span class="comment">// event that we will be registering on the DOM node.</span></div><div class="line">    <span class="keyword">var</span> match = key.match(delegateEventSplitter);</div><div class="line">    <span class="comment">// In our case eventName will be click and selector will be 'p'</span></div><div class="line">    <span class="keyword">var</span> eventName = match[<span class="number">1</span>], selector = match[<span class="number">2</span>];</div><div class="line">    <span class="comment">// The next step is to ensure that the `this`</span></div><div class="line">    <span class="comment">// context of the event handler will be</span></div><div class="line">    <span class="comment">// our view as compared to the default `this` context</span></div><div class="line">    <span class="comment">// of a event registration which would be the</span></div><div class="line">    <span class="comment">// DOM node that event was registered on</span></div><div class="line">    <span class="comment">// (the p tag in our case).</span></div><div class="line">    method = _.bind(method, <span class="keyword">this</span>);</div><div class="line">    <span class="comment">// This line can be a bit confusing initially,</span></div><div class="line">    <span class="comment">// however it is a very powerful one. This is taking your event</span></div><div class="line">    <span class="comment">// name that you want to register for</span></div><div class="line">    <span class="comment">// (click in our case) and setting up</span></div><div class="line">    <span class="comment">// a jquery event namespace*, significantly</span></div><div class="line">    <span class="comment">// simplifying how to unregister</span></div><div class="line">    <span class="comment">// all events on this given view instance.</span></div><div class="line">    eventName += <span class="string">'.delegateEvents'</span> + <span class="keyword">this</span>.cid;</div><div class="line">    <span class="comment">// At this point eventName will be something</span></div><div class="line">    <span class="comment">// like "click.delegateEventsc1"</span></div><div class="line">    <span class="keyword">if</span> (selector === <span class="string">''</span>) {</div><div class="line">      <span class="comment">// If we do not have a selector we set the event listener on</span></div><div class="line">      <span class="comment">// the root `el` node of out view.</span></div><div class="line">      <span class="keyword">this</span>.$el.on(eventName, method);</div><div class="line">    } <span class="keyword">else</span> {</div><div class="line">      <span class="comment">// If there is a selector however we use the</span></div><div class="line">      <span class="comment">// 3 argument signature of jquery's `on`.</span></div><div class="line">      <span class="keyword">this</span>.$el.on(eventName, selector, method);</div><div class="line">    }</div><div class="line">  }</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">},</div></pre></td></tr></table></figure>

<p>After that look into how <code>delegateEvents</code> works you may be thinking OK great now I know how it works. However I will challenge your understanding with a follow up. If you noticed that we call <code>delegateEvents</code> in the view’s constructor, before we have ever called render.<br>So … We just registered a click handler on a <code>p</code> tag that does not exist. <code>addEventListener</code> would not work, so how does <code>on</code> work before we have even rendered? Good question right?</p>
<p>Taking a look at the jquery docs reveals the answer to our puzzling question. In comes <strong>Direct</strong> and in our case <strong>delegated events</strong>.<br><a href="http://api.jquery.com/on/#direct-and-delegated-events" target="_blank" rel="external">Docs</a></p>
<blockquote>
<p>Delegated events have the advantage that they can process events from descendant elements that are added to the document at a later time. By picking an element that is guaranteed to be present at the time the delegated event handler is attached, you can use delegated events to avoid the need to frequently attach and remove event handlers</p>
</blockquote>
<p>Meaning, since we know we have our root <code>el</code> from Backbone that will eventually contain our template, we can use this feature of jQuery to take care of the deferred event registration for us.</p>
<p>In summary, the Backbone event hash does quite a bit more than simple registration of key value pairs. It abstracts a fairly complex set of concerns into a easy-to-decipher declarative API.</p>
<p>I hope you learned something, I know I did.<br>Thanks to <a href="https://github.com/Seebiscuit" target="_blank" rel="external">Seebiscuit</a> for asking this great question<br>in the <a href="https://gitter.im/marionettejs/backbone.marionette?utm_source=share-link&amp;utm_medium=link&amp;utm_campaign=share-link" target="_blank" rel="external">Marionette Chatroom</a>.</p>
<p>Sam Saccone<br><a href="http://twitter.com/samccone" target="_blank" rel="external">@samccone</a></p>
<hr>
<p>[1] - Angular has <code>ng-click</code>, and React has <code>onClick</code>. There is a nice argument around coupling the event bindings to your template, but for this article that is not a battle I want to fight. :)<br>[2] - <a href="http://c2.com/cgi/wiki?GuardClause" target="_blank" rel="external">http://c2.com/cgi/wiki?GuardClause</a><br>[3] - <a href="http://api.jquery.com/on/#event-names" target="_blank" rel="external">http://api.jquery.com/on/#event-names</a> <a href="http://api.jquery.com/event.namespace/" target="_blank" rel="external">http://api.jquery.com/event.namespace/</a></p>
]]></content>
    
    
      <category term="backbone" scheme="http://marionettejs.github.io/tags/backbone/"/>
    
      <category term="learning" scheme="http://marionettejs.github.io/tags/learning/"/>
    
      <category term="question" scheme="http://marionettejs.github.io/tags/question/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Marionette Version 3 Discussions]]></title>
    <link href="http://marionettejs.github.io/2015/01/12/v3-planning/"/>
    <id>http://marionettejs.github.io/2015/01/12/v3-planning/</id>
    <published>2015-01-12T17:51:57.000Z</published>
    <updated>2016-08-05T21:16:13.630Z</updated>
    <content type="html"><![CDATA[<p>This past Friday the Marionette Team got together and did some v3 planning for the next release of Marionette. The focus of our conversation was on adding the missing pieces of the application layer that are very much needed within Marionette. Over the past few years there has been a community effort to establish patterns that allow people to build large applications in Marionette. We are exploring ways that we can codify those concepts into the core.</p>
<p><a href="https://github.com/jmeas/" target="_blank" rel="external">@jmeas</a> has done some great work in this area via the creation of a library called <a href="https://github.com/jmeas/backbone.base-router" target="_blank" rel="external">base-router</a>. We want to build on top of this work to create a router that has some new concepts such as state based routing and named routes. There will most likely be more features, inspired both from the ember router and angular ui router.</p>
<p>We then moved onto talking about the <code>Application</code> layer of Marionette. Currently it does several things but is still generic and does not integrate automatically with the concepts that Marionette already has baked in - just look at the amount of code needed to kick off a marionette app <a href="http://jsfiddle.net/samccone/F59qp/" target="_blank" rel="external">demo</a>. We are planning on more tightly coupling the router to the Application object as well as hardening the concept of an application having a life-cycle.</p>
<p>There was talk of investigating the ability for an application to contain “sub applications” which are just application objects that are started and stopped automatically depending on their parent app state. This concept should make it straightforward to allow you to add significant app complexity without having to engineer a bespoke way to manange application life cycle.</p>
<p>Thoughts, concerns? Want to come chat V3? Come join us!</p>
<p><a href="https://gitter.im/marionettejs/backbone.marionette?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge" target="_blank" rel="external"><img src="https://badges.gitter.im/Join%20Chat.svg" alt="Gitter"></a></p>
<blockquote>
<p>Note that these are early discussions and the final result may be different than what is listed above.</p>
</blockquote>
<p>-<br><a href="http://github.com/samccone" target="_blank" rel="external">@samccone</a></p>
]]></content>
    
    
      <category term="plans" scheme="http://marionettejs.github.io/tags/plans/"/>
    
      <category term="v3" scheme="http://marionettejs.github.io/tags/v3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Meeting Notes (7.15.14)]]></title>
    <link href="http://marionettejs.github.io/2014/07/16/meeting-notes-07-15-14/"/>
    <id>http://marionettejs.github.io/2014/07/16/meeting-notes-07-15-14/</id>
    <published>2014-07-16T00:19:33.000Z</published>
    <updated>2016-08-05T21:16:13.630Z</updated>
    <content type="html"><![CDATA[<p>The Marionette team meets privately every Tuesday at 5:30PM EST to discuss all things Marionette related.</p>
<h2 id="Attendees">Attendees</h2>
<p><a href="https://github.com/samccone" target="_blank" rel="external">samccone</a>, <a href="https://github.com/thejameskyle" target="_blank" rel="external">thejameskyle</a>, <a href="https://github.com/jfairbank" target="_blank" rel="external">jfairbank</a>, <a href="https://github.com/cmaher" target="_blank" rel="external">cmaher</a>, <a href="https://github.com/ahumphreys87" target="_blank" rel="external">ahumphreys87</a>, <a href="https://github.com/jmeas" target="_blank" rel="external">jmeas</a></p>
<h3 id="Upcoming_2-1_Release">Upcoming 2.1 Release</h3>
<p>The next minor release of Marionette is scheduled to be in 2 weeks, so we discussed our plan to meet that release date. We decided that we won’t be merging any new features into <code>v2.1</code> since it’s already quite large. All outstanding new feature requests have been pushed to <code>v2.2</code>.</p>
<p>Next Tuesday we’ll be releasing <code>v2.1-alpha</code> for the early adopters.</p>
<h3 id="Documentation">Documentation</h3>
<p>Our current priority is to update the website and documentation. We laid out our plan of attack for the next phase of the Marionette documentation. We’ll be using <a href="https://github.com/visionmedia/dox" target="_blank" rel="external">dox</a> to generate the new API documentation, and we’re tracking our progress of adding the inline documentation on <a href="https://github.com/marionettejs/backbone.marionette/issues/1652" target="_blank" rel="external">#1652</a>.</p>
<h3 id="pickOption">pickOption</h3>
<p>We discussed a means to implement <code>pickOption</code> in a way that prepares us to move away from supporting <code>this.options</code>. The idea was proposed to have a private property, <code>_mergeOptions</code>, that is ultimately what is merged onto the Object. Then, objects on the prototypal chain would have access to methods to add, remove, and get values from that array.</p>
<p>The issue was brought up that it might not be possible to support this functionality while also supporting a declarative approach to the <code>mergeOptions</code> array on our Classes without modifying Backbone’s extend method, which isn’t something we’re interested<br>in doing.</p>
]]></content>
    
    
      <category term="notes" scheme="http://marionettejs.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Introducing Backbone.Radio]]></title>
    <link href="http://marionettejs.github.io/2014/07/11/introducing-backbone-radio/"/>
    <id>http://marionettejs.github.io/2014/07/11/introducing-backbone-radio/</id>
    <published>2014-07-11T11:46:03.000Z</published>
    <updated>2016-08-05T21:16:13.630Z</updated>
    <content type="html"><![CDATA[<p>Marionette comes bundled with a library called <a href="https://github.com/marionettejs/backbone.wreqr" target="_blank" rel="external">Backbone.Wreqr</a>, and in the coming months we will replace it with a new library by the name of <a href="https://github.com/jmeas/backbone.radio" target="_blank" rel="external">Backbone.Radio</a>. Radio is heavily inspired by Wreqr, but it was rewritten from the ground up.</p>
<p>I wouldn’t be surprised if you’re unacquainted with Wreqr. In fact, I would wager it’s one of the lesser-used pieces of Marionette. I blame this on the fact that it lives in a separate repository and is only mentioned in the Marionette documentation in passing (shameless plug: brand new Marionette docs are on the way!).</p>
<p>This post will outline our decision to rewrite and replace Wreqr. But first, because of the relative obscurity of the library, I feel the need to give a brief introduction to what it is and the problem that it intends to solve.</p>
<h3 id="What_is_Backbone-Wreqr?">What is Backbone.Wreqr?</h3>
<p>Backbone.Wreqr is a collection of three messaging patterns. Large applications with many pieces need to solve the problem of how those pieces interact. Wreqr can be used to structure those interactions. An application that leans heavily on Wreqr would be considered an event-driven application.</p>
<p>There’s much interesting discussion about the pros and cons of event-driven architecture, but it’s beyond the scope of this post to get into those things. For those interested, Google has a plethora of information on the subject. I encourage you to run some searches to read more about it.</p>
<h3 id="Why_rewrite_Wreqr?">Why rewrite Wreqr?</h3>
<p>The decision to rewrite a library is a risky one, and it’s not an option I would normally consider for a library as popular as Marionette. The primary concern, of course, is that we might fragment the community by making changes that prevent developers from ever updating their applications.</p>
<p>We think that the risk of fragmentation with this rewrite is low. Firstly, the fact that so few people use Wreqr is advantageous. Secondly, and more importantly, updating from Wreqr to Radio should be pretty straightforward. All of the old functionality is being transferred over*, and the changes to the API are essentially renamed methods. In fact, the <a href="https://github.com/marionettejs/Marionette.Upgrade" target="_blank" rel="external">Marionette.Upgrade tool</a> should be able to handle this upgrade automatically for you once it’s time to do it.</p>
<p>Also, because of the brand new API and the desire to give the library a different name, we decided that creating a separate project was a better choice than making this an update to Wreqr.</p>
<p>* <em>One bit of undocumented, inconsistent functionality from Commands has been removed. Specifically, Commands handlers that are added after you’ve made the call to that command will no longer be executed. You can only order commands that already exist.</em></p>
<h3 id="The_benefits_of_Radio">The benefits of Radio</h3>
<p>There are a large number of benefits to Radio, and I won’t get into all of them here. But I will cover a few of the bigger ones.</p>
<p>One benefit of Radio is that it’s a lot smaller than Wreqr. In fact, at feature parity with Wreqr, it was 40% the size. But we went even further by adding a handful of new features to it – and it still came out smaller! So we’re really happy that Marionette will become smaller <em>and</em> have more functionality when we make the swap.</p>
<p>The biggest new feature is a <a href="https://github.com/jmeas/backbone.radio#debug" target="_blank" rel="external">collection of properties and methods</a> that should help you debug your application during development.</p>
<p>The <code>DEBUG</code> property will send a warning to the console when a section of your code calls an unhandled command or request, and also when you try to unregister a command or request that was never registered. This will help ensure that your event names are typed correctly, which is a common problem people have when working with event-driven architecture.</p>
<p>Another benefit, and maybe the most noticeable, is the cleaner API. One poor design decision of Wreqr is that the API for Commands and RequestResponse are identical. This prevented one from merging instances of the two messaging systems onto the same Object. The consequences of this were the ugly instance names that you might be familiar with: <code>vent</code>, <code>commands</code>, and <code>reqres</code>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> profileChannel = Backbone.Wreqr.radio.channel(<span class="string">'profile'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Because the APIs conflict, we need to store our</span></div><div class="line"><span class="comment">// instances as properties. If only we could attach the</span></div><div class="line"><span class="comment">// API directly on the channel...</span></div><div class="line">profileChannel.vent;</div><div class="line">profileChannel.reqres;</div><div class="line">profileChannel.commands;</div></pre></td></tr></table></figure>

<p>With Radio, there are no API conflicts, so we’ve done away with the instance names altogether.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> profileChannel = Backbone.radio.channel(<span class="string">'profile'</span>);</div><div class="line"></div><div class="line"><span class="comment">// The API is directly on the channel.</span></div><div class="line"><span class="comment">// So, for instance, there's no more profileChannel.vent!</span></div><div class="line">profileChannel.listenTo(...);</div></pre></td></tr></table></figure>

<p>You’ll need to learn the new API for Commands and Requests, but I think developers will find it even easier to remember than before. Let’s take a look at registering a handler for Commands.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before:</span></div><div class="line">profileChannel.commands.setHandler(<span class="string">'update:profile'</span>, updateProfile);</div><div class="line"></div><div class="line"><span class="comment">// Now:</span></div><div class="line">profileChannel.comply(<span class="string">'update:profile'</span>, updateProfile);</div></pre></td></tr></table></figure>

<p>Ordering the Command later:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before:</span></div><div class="line">profileChannel.commands.execute(<span class="string">'update:profile'</span>, newSettings);</div><div class="line"></div><div class="line"><span class="comment">// Now:</span></div><div class="line">profileChannel.command(<span class="string">'update:profile'</span>, newSettings);</div></pre></td></tr></table></figure>

<p>In general you’ll find that the API is far less verbose than it was before. Let’s look at one last example, listening in on a channel:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before:</span></div><div class="line">myView.listenTo(profileChannel.vent, <span class="string">'update:profile'</span>, onUpdateProfile);</div><div class="line"></div><div class="line"><span class="comment">// Now:</span></div><div class="line">myView.listenTo(profileChannel, <span class="string">'update:profile'</span>, onUpdateProfile);</div></pre></td></tr></table></figure>

<p>We think this cleaner API will make your code clearer and less cluttered, while also being more pleasant to work with.</p>
<h3 id="Should_I_use_Radio_now?">Should I use Radio now?</h3>
<p>Unfortunately, it’s not that easy to switch to Radio in Marionette v2.0. However, a change in the upcoming v2.1 (with a release date of 7/29/14) will make it much easier to make the swap if you choose.</p>
<p>So what about when v2.1 is available? We definitely encourage you to give it a try! The API is stable, and it’s being used in production applications just fine. Do note that you’ll need to update your build system to pull in Radio instead of Wreqr. To do this, you’ll need to use the ‘core’ build of Marionette, which doesn’t include Wreqr or Babysitter, and then manually pull in Radio and Babysitter.</p>
<p>If you don’t have the time to refactor just yet, don’t worry. As I mentioned before, we will do all that we can to make the update process as simple as can be.</p>
<p>So that concludes this introduction to Backbone.Radio. I hope you’re as excited for this new library as we are.</p>
<p>Are you using Backbone.Wreqr in your Applications? Let us know about it in the comments below.</p>
]]></content>
    
    
      <category term="news" scheme="http://marionettejs.github.io/tags/news/"/>
    
      <category term="by Jmeas" scheme="http://marionettejs.github.io/tags/by-Jmeas/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Marionette v2.0.1 Released]]></title>
    <link href="http://marionettejs.github.io/2014/07/05/v201-release/"/>
    <id>http://marionettejs.github.io/2014/07/05/v201-release/</id>
    <published>2014-07-05T13:24:56.000Z</published>
    <updated>2016-08-05T21:16:13.630Z</updated>
    <content type="html"><![CDATA[<p>Marionette v2.0.1 has been released into the wild! There are lot of great features and changes, but don’t be scared to upgrade because we’ve created an awesome Upgrade Tool to help you.</p>
<p><strong>Upgrade Tool:</strong> <a href="https://github.com/marionettejs/Marionette.Upgrade" target="_blank" rel="external">https://github.com/marionettejs/Marionette.Upgrade</a></p>
<p><strong>TIP!</strong> Press <strong>y</strong> first to start the tool. Here’s an animated of gif showing you what it looks like. The terminal is really light but notice that at the top, you’ll see the actual file and line number of the suggested change.</p>
<p><strong>Animated gif of the upgrade process:</strong> <a href="https://minbox.com/app/collections/URhfhIg/items/owYA_ga" target="_blank" rel="external">https://minbox.com/app/collections/URhfhIg/items/owYA_ga</a></p>
<p>Read the changelog details, and if you have further questions, find us in the Marionette chat room.</p>
<p><strong>Changelog detail:</strong> <a href="https://github.com/Puppets/marionette-changelog-detail" target="_blank" rel="external">https://github.com/Puppets/marionette-changelog-detail</a></p>
<p><strong>Chat room:</strong> <a href="https://gitter.im/marionettejs/backbone.marionette" target="_blank" rel="external">https://gitter.im/marionettejs/backbone.marionette</a></p>
]]></content>
    
    
      <category term="releases" scheme="http://marionettejs.github.io/tags/releases/"/>
    
  </entry>
  
</feed>
